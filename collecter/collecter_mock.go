// Code generated by MockGen. DO NOT EDIT.
// Source: collecter.go

// Package collecter is a generated GoMock package.
package collecter

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ticker "github.com/sschiz/indexer/ticker"
)

// MockCollecter is a mock of Collecter interface.
type MockCollecter struct {
	ctrl     *gomock.Controller
	recorder *MockCollecterMockRecorder
}

// MockCollecterMockRecorder is the mock recorder for MockCollecter.
type MockCollecterMockRecorder struct {
	mock *MockCollecter
}

// NewMockCollecter creates a new mock instance.
func NewMockCollecter(ctrl *gomock.Controller) *MockCollecter {
	mock := &MockCollecter{ctrl: ctrl}
	mock.recorder = &MockCollecterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollecter) EXPECT() *MockCollecterMockRecorder {
	return m.recorder
}

// Collect mocks base method.
func (m *MockCollecter) Collect(ctx context.Context) ([]*ticker.TickerPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collect", ctx)
	ret0, _ := ret[0].([]*ticker.TickerPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collect indicates an expected call of Collect.
func (mr *MockCollecterMockRecorder) Collect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockCollecter)(nil).Collect), ctx)
}
